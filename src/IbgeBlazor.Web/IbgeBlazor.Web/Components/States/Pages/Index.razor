@page "/states"
@using IbgeBlazor.Core.LocalityContext.Services
@inject IStatesService _statesService
@attribute [StreamRendering]
@rendermode InteractiveServer

<PageTitle>Estado</PageTitle>

<h1>Estados</h1>



@if (states == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <a class="btn btn-primary float-end" href="/states/create" style="">Nova Estado</a>
    <table class="table table-striped table-hover">
        <thead class="thead-dark">
            <tr>
                <th>Estadir UF</th>
                <th>Estado</th>
                <th>Ações</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var state in states!)
            {
                <tr>
                    <td>@state.Uf</td>
                    <td>@state.Description</td>
                    <td>
                        <a class="btn btn-info btn-sm" href="/states/details/@state.Id">Visualizar</a>
                        <a class="btn btn-warning btn-sm" href="/states/edit/@state.Id">Editar</a>
                        <button class="btn btn-danger btn-sm" @onclick="() => DeleteCity(state!.Id)">Deletar</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

@code {
    private List<StateModel>? states;

    protected override async Task OnInitializedAsync()
    {
        var results = await _statesService.ListStates();

        if (results?.Success is true)
        {
            states = results.Data!.ToList();
        }
    }



    private async Task DeleteCity(int? stateId)
    {
        var cityToRemove = states!.FirstOrDefault(c => c.Id == stateId);

        if (cityToRemove == null) return;

        var removeResult = await _statesService.DeleteState(stateId!.Value);

        if (removeResult?.Success is true)
        {
            states!.Remove(cityToRemove!);
        }
    }
}