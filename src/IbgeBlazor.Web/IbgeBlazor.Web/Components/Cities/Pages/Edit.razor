@page "/cities/edit/{ibgeCode}"
@using IbgeBlazor.Core.LocalityContext.DataModels.Cities
@using IbgeBlazor.Core.LocalityContext.Services
@inject ICitiesService _citiesService
@inject NavigationManager NavigationManager

<h2>
    Edição
    @if (!string.IsNullOrEmpty(Input?.CityName))
    {
        <span> - Código do IBGE: @IbgeCode</span>
    }

</h2>

<EditForm EditContext="_editContext" OnValidSubmit="OnSubmitHandler" FormName="updateCity">
    <div class="row">
        <div class="col-md-8 px-2 d-flex flex-column">
            <DataAnnotationsValidator />
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.CityName" class="form-control" aria-required="true" />
                <label asp-for="Input.CityName">Nome da Cidade</label>
                <ValidationMessage For="() => Input.CityName" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <ValidationMessage For="() => ModelResult" class="text-danger" />
            </div>
            <div class="d-flex justify-content-end py-2">
                <button type="submit" class="btn btn-sm btn-primary ml-auto align-self-end mr-auto px-2">Salvar</button>
            </div>
        </div>
    </div>
</EditForm>


@code {

    [SupplyParameterFromForm]
    private UpdateCityModel Input { get; set; } = new();

    [Parameter]
    public string IbgeCode { get; set; } = null!;

    private ValidationMessageStore _validationMessageStore = default!;
    private EditContext _editContext = default!;

    private ModelResultBase? ModelResult = default!;

    public async Task OnSubmitHandler()
    {
        ModelResult = await _citiesService.UpdateCity(IbgeCode, Input);

        if (Validate())
        {
            NavigationManager.NavigateTo("/cities");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        _editContext = new EditContext(Input);
        _validationMessageStore = new ValidationMessageStore(_editContext);
        var modelResult = await _citiesService.GetCityDetails(IbgeCode);
        if (modelResult?.Success is true)
        {
            Input = new UpdateCityModel
                {
                    CityName = modelResult.Data?.Name ?? string.Empty
                };
        }
        else
        {
            _validationMessageStore.Add(() => ModelResult!, "Não foi possível Recuperar os dados para Edição");

            _editContext.NotifyValidationStateChanged();
        }
    }

    private bool Validate()
    {
        if (ModelResult == null)
        {
            _validationMessageStore.Add(() => ModelResult!, "Houve erro na execução");
            return false;
        }

        if (ModelResult?.Success is false)
        {
            foreach (var error in ModelResult.Errors)
            {
                _validationMessageStore.Add(() => ModelResult, error!.Message!);

            }
            _editContext.NotifyValidationStateChanged();

        }
        return ModelResult?.Success is true;
    }
}