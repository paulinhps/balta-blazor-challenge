@page "/cities/edit/{ibgeCode}"
@using IbgeBlazor.Core.LocalityContext.DataModels.Cities
@using IbgeBlazor.Core.LocalityContext.Services
@inject ICitiesService _citiesService
@inject NavigationManager NavigationManager

<h2>Criar nova Cidade</h2>

<EditForm Model="Input" method="put" asp-route-returnUrl="/cities/update/{ibgeCode}" OnValidSubmit="PutUpdateCity" FormName="updateCity">
    <div class="row">
        <div class="col-md-8 px-2 d-flex flex-column">
            <DataAnnotationsValidator />
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.CityName" class="form-control" aria-required="true" />
                <label asp-for="Input.CityName">Nome da Cidade</label>
                <ValidationMessage For="() => Input.CityName" class="text-danger" />
            </div>
            <div class="d-flex justify-content-end py-2">
                <button type="submit" class="btn btn-sm btn-primary ml-auto align-self-end mr-auto px-2">Incluir Cidade</button>
            </div>
        </div>
    </div>
</EditForm>


@code {

    [SupplyParameterFromForm]
    private UpdateCityModel Input { get; set; } = new();

    [Parameter]
    public string ibgeCode { get; set; }


    public async Task PutUpdateCity(EditContext editContext)
    {
        var modelResult = await _citiesService.UpdateCity(ibgeCode, Input);
        if (modelResult?.Success is true)
        {
            NavigationManager.NavigateTo("/cities");
        }
    }

    protected override async Task OnInitializedAsync()
    {
        var modelResult = await _citiesService.GetCityDetails(ibgeCode);
        if (modelResult?.Success is true)
        {
            Input = new UpdateCityModel
            {
                CityName = modelResult.Data?.Name ?? string.Empty
            };
        }
    }
}